{"version":3,"file":"ngmesher.js","sources":["../src/index.js"],"sourcesContent":["/**\n * @param\n * Extract a typed array from an ArrayBuffer.\n * @param {ArrayBuffer} buffer - a buffer that contains some data\n * @param {Number} byteOffset - the offset from which to read in buffer, in number of bytes\n * @param {Function} arrayType - must NOT be an instance, but the object itself, such as `Float32Array`. This will be used as a constructor\n * @param {Number} nbElements - number of elements to slice from the buffer\n * @param {Boolean} littleEndian - if true, we are extracting the data from buffer in a little-endian fashion, if false, it will be with a big-endian fashion\n * @return {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} the array with data from the buffer\n */\nfunction sliceTypedArray(buffer, byteOffset, arrayType, nbElements, littleEndian=true) {\n  let array = new arrayType(nbElements)\n  let bytesPerElements = array.BYTES_PER_ELEMENT\n  let dataView = new DataView(buffer)\n\n  let viewExtractMethods = {\n    'Int8Array'    : 'getInt8',\n    'Uint8Array'   : 'getUint8',\n    'Int16Array'   : 'getInt16',\n    'Uint16Array'  : 'getUint16',\n    'Int32Array'   : 'getInt32',\n    'Uint32Array'  : 'getUint32',\n    'Float32Array' : 'getFloat32',\n    'Float64Array' : 'getFloat64',\n  }\n\n  let viewExtractMethod = viewExtractMethods[array.constructor.name]\n\n  for (let i=0; i<nbElements; i+=1) {\n    array[i] = dataView[viewExtractMethod](byteOffset + i * bytesPerElements, littleEndian)\n  }\n  return array\n}\n\n\n/**\n * @private\n * Insert the content of a typed array into a buffer. If the buffer if not large enough\n * to receive the array, an error is thown.\n * Nothing is returned, the buffer in arguments is modified on place.\n * @param {ArrayBuffer} buffer - a buffer to insert data\n * @param {Number} byteOffset - the byte positions to start writing the array data in the buffer\n * @param {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} array - a typed array\n * @param {Boolean} littleEndian - will write in a little-endian fashion if true, or in a big-endian fashion if false\n */\nfunction insertTypedArray(buffer, byteOffset, array, littleEndian=true) {\n  // check if it fits\n  if ((buffer.byteLength - byteOffset) < array.byteLength ) {\n    throw \"The buffer is not large enough to receive the content of the given array.\"\n    return\n  }\n\n  let bytesPerElements = array.BYTES_PER_ELEMENT\n  let dataView = new DataView(buffer)\n\n  let viewInsertMethods = {\n    'Int8Array'    : 'setInt8',\n    'Uint8Array'   : 'setUint8',\n    'Int16Array'   : 'setInt16',\n    'Uint16Array'  : 'setUint16',\n    'Int32Array'   : 'setInt32',\n    'Uint32Array'  : 'setUint32',\n    'Float32Array' : 'setFloat32',\n    'Float64Array' : 'setFloat64',\n  }\n\n  let viewInsertMethod = viewInsertMethods[array.constructor.name]\n\n  let movingByteOffset = byteOffset\n  for (let i=0; i<array.length; i+=1) {\n    array[i] = dataView[viewInsertMethod](movingByteOffset, array[i], littleEndian)\n    movingByteOffset += bytesPerElements\n  }\n}\n\n\n/**\n * Decode a buffer of a NG mesh file\n * @return {Object} of the form {vertices: Float32Array, triangles: Uint32Array}\n * where `vertices` is a array of vertices positions as [x0, y0, z0. x1, y1, z1, ...]\n * and `triangles` is an array of vertex indices as triplet [a0, b0, c0, a1, b1, c1, ...]\n */\nfunction decode (buffer) {\n  // everything is little endian in the Neuroglancer mesh encoding\n  let isLittleEndian = true\n\n  // 1 x uint32 : the number of vertices\n  let nbVertices = sliceTypedArray(buffer, 0, Uint32Array, 1)[0]\n\n  // 3 x nbVertices x float32 : the vertices positions as [x, y, z, x, y, x, ...]\n  let vertices = sliceTypedArray(buffer, 4, Float32Array, nbVertices * 3)\n  let byteOffset = 4 + vertices.byteLength\n\n  // find the number of triangles\n  let nbTriangles = (buffer.byteLength - byteOffset) / 12\n\n  let triangles = sliceTypedArray(buffer, byteOffset, Uint32Array, nbTriangles*3)\n\n  return {\n    vertices: vertices,\n    triangles: triangles\n  }\n}\n\n\n/**\n * From a list of vertices and a list of triangles, create a binary buffer of a NG mesh file\n * @param {Float32Array} vertices - array of vertices positions as [x0, y0, z0. x1, y1, z1, ...]\n * @param {Uint32Array} triangles - vertex indices as triplet [a0, b0, c0, a1, b1, c1, ...]\n * @return {ArrayBuffer} the buffer with the binary content for a NG mesh file\n */\nfunction encode(vertices, triangles) {\n  let verticesCompatible = vertices\n  let trianglesCompatible = triangles\n\n  if (!(vertices instanceof Float32Array)) {\n    console.warn(\"Make sure your vertices array is float32 compatible.\");\n    verticesCompatible = new Float32Array(vertices)\n  }\n\n  if (!(triangles instanceof Uint32Array)) {\n    console.warn(\"Make sure your triangle array is uint32 compatible.\");\n    trianglesCompatible = new Uint32Array(triangles)\n  }\n\n  let bufferbyteLength = 4 + verticesCompatible.byteLength + trianglesCompatible.byteLength\n  let buffer = new ArrayBuffer(bufferbyteLength)\n\n  // lets write thing in this buffer\n  // 1. the number of vertices:\n  insertTypedArray(buffer, 0, new Uint32Array([verticesCompatible.length/3]))\n\n  // 2. add the vertices\n  insertTypedArray(buffer, 4, verticesCompatible)\n\n  // 3. add the triangles\n  insertTypedArray(buffer, 4 + verticesCompatible.byteLength, trianglesCompatible)\n\n  return buffer\n}\n\nexport default ({\n  decode,\n  encode\n})\n"],"names":[],"mappings":"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"}